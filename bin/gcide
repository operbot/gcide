#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=E1101,E0611,C0116,C0413,C0411,W0406,R0903,W0212,W0613


"shell"


import os
import readline
import sys
import signal
import termios
import time


sys.path.insert(0, os.getcwd())


from gcide import Wd, printable, wait
from gcide import Client, Event, parse, scan
from gcide.run import docmd
from gcide.irc import IRC
from gcide.rss import Fetcher


from gcide import cmd, irc, mdl, rss, wsd
from gcide.irc import Config


Config.nick = "gcide"
Config.channel = "#gcide"
Config.realname = "Prosecutor. Court. Reconsider OTP-CR-117/19."
Config.username = "gcide"


Wd.workdir = os.path.expanduser("~/.gcide")


scan(cmd)
scan(irc)
scan(mdl)
scan(rss)
scan(wsd)


class CLI(Client):

    @staticmethod
    def raw(txt):
        print(txt)


class Console(CLI):

    @staticmethod
    def announce(txt):
        pass

    @staticmethod
    def handle(event):
        Client.handle(event)
        event.wait()

    def poll(self):
        event = Event()
        event.txt = input("> ")
        event.orig = repr(self)
        return event


def banner(cfg):
    print(
          "GCIDE started at %s %s" % (
                                     time.ctime(time.time()).replace("  ", " "),
                                     printable(cfg, "debug,verbose")
                                    )
         )


def daemon():
    pid = os.fork()
    if pid != 0:
        os._exit(0)
    os.setsid()
    os.umask(0)
    sis = open("/dev/null", 'r')
    sos = open("/dev/null", 'a+')
    ses = open("/dev/null", 'a+')
    os.dup2(sis.fileno(), sys.stdin.fileno())
    os.dup2(sos.fileno(), sys.stdout.fileno())
    os.dup2(ses.fileno(), sys.stderr.fileno())


def hup(sig, frame):
    print("signal 15 called")
    sys.stdout.flush()


signal.signal(signal.SIGHUP, hup)


def wrap(func):
    fds = sys.stdin.fileno()
    gotterm = True
    try:
        old = termios.tcgetattr(fds)
    except termios.error:
        gotterm = False
    readline.redisplay()
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
    finally:
        if gotterm:
            termios.tcsetattr(fds, termios.TCSADRAIN, old)


def main():
    txt = ' '.join(sys.argv[1:])
    cfg = parse(txt)
    if cfg.txt:
        cli = CLI()
        docmd(cli, cfg.otxt)
        return
    if "d" in cfg.opts:
        daemon()
    if "c" in cfg.opts:
        banner(cfg)
    if "d" in cfg.opts or "c" in cfg.opts:
        bot = IRC()
        bot.start()
        if "c" in cfg.opts:
            print(printable(bot.cfg, "nick,channel,server,port,sasl"))
        fetcher = Fetcher()
        fetcher.start()
        mdl.init()
    if "c" in cfg.opts:
        csl = Console()
        csl.start()
        csl.forever()
    if "d" in cfg.opts:
        wait()


wrap(main)
